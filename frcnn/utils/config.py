import json
from keras import backend as K


class Config:

    def __init__(self):
        # load json config file
        self.json = json.load(open('./config.json', 'r'))
        
        # verbose
        self.verbose = bool(self.json['verbose'])

        # base CNN model
        self.conv_net = self.json['conv_net']

        # setting for data augmentation
        self.horizontal_flips = bool(self.json['horizontal_flips'])
        self.vertical_flips = bool(self.json['vertical_flips'])
        self.rotate_90 = bool(self.json['rotate_90'])

        # anchor box scales
        self.anchor_scales = self.json['anchor_scales']

        # anchor box ratios
        self.anchor_ratios = self.json['anchor_ratios']

        # size to resize the smallest side of the image
        self.img_small_size = self.json['img_small_size']

        # image channel-wise mean to subtract
        self.img_channel_mean = self.json['img_channel_mean']
        self.img_scaling_factor = self.json['img_scale_factor']

        # number of ROIs at once
        self.num_roi = self.json['num_roi']

        # stride at the RPN (this depends on the network configuration)
        self.stride = self.json['stride']
        
        # to handle class imbalance
        self.balanced_classes = bool(self.json['balanced_classes'])

        # scaling the stdev
        self.std_scaling = self.json['std_scaling']
        self.class_regress_std = self.json['class_regress_std']

        # overlaps for RPN
        self.rpn_min_overlap = self.json['rpn_min_overlap']
        self.rpn_max_overlap = self.json['rpn_max_overlap']

        # overlaps for classifier ROIs
        self.classifier_min_overlap = self.json['classifier_min_overlap']
        self.classifier_max_overlap = self.json['classifier_max_overlap']

        # placeholder for the class mapping, automatically generated by the parser
        self.class_mapping = None
        
        # training epochs
        self.epochs = self.json['epochs']
        self.epoch_length = self.json['epoch_length']

        # inference confidence
        self.bbox_threshold = self.json['bbox_threshold']

        #location of pretrained weights for the base network
        # weight files can be found at:
        # https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels_notop.h5
        # https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5

        GPU = bool(self.json['use_GPU'])

        self.model_path = './weights/model_frcnn.%s.hdf5' % self.conv_net
        self.train_path = '../data/VOCdevkit' if GPU else '../datasets/VOC2012-dataset'
        self.log_path = './log'